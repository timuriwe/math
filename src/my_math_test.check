#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "my_math.h"

//! my_abs tests

#test my_abs_test_1
int i;
for (i = -128; i <= 127; i++) {
    ck_assert_int_eq(abs(i), my_abs(i));
}

#test my_abs_test_2
ck_assert_double_eq(abs(-7), my_abs(-7));

#test my_abs_test_3
ck_assert_double_eq(abs(-98), my_abs(-98));

#test my_abs_test_4
ck_assert_double_eq(abs(123), my_abs(123));

#test my_abs_test_5
ck_assert_double_eq(abs(10009), my_abs(10009));

#test my_abs_test_6
ck_assert_double_eq(abs(-10009), my_abs(-10009));

//! my_acos tests

#test my_acos_test_1
ck_assert_double_eq_tol(acos(0.567), my_acos(0.567), 1e-7);

#test my_acos_test_2
ck_assert_double_eq_tol(acos(0.2), my_acos(0.2), 1e-7);

#test my_acos_test_3
ck_assert_double_eq_tol(acos(-0.2), my_acos(-0.2), 1e-7);

#test my_acos_test_4
ck_assert_double_eq_tol(acos(-0.567), my_acos(-0.567), 1e-7);

//! my_asin tests

#test my_asin_test_1
ck_assert_double_eq_tol(asin(0.21456), my_asin(0.21456), 1e-7);
    
#test my_asin_test_2
ck_assert_double_eq_tol(asin(-0.21456), my_asin(-0.21456), 1e-7);

#test my_asin_test_3
ck_assert_double_nan(my_asin(my_NAN));
    
#test my_asin_test_4
ck_assert_double_eq_tol(asin(1), my_asin(1), 1e-7);

#test my_asin_test_5
ck_assert_double_eq_tol(asin(-1), my_asin(-1), 1e-7);

//! my_atan tests

#test my_atan_test_1
ck_assert_double_eq(atan(0.23456), my_atan(0.23456));

#test my_atan_test_2
for (float k = -10; k <= 10; k += 4) {
    double a = my_atan(k);
    double b = atan(k);
    ck_assert_double_eq_tol(a, b, 1e-7);
}

#test my_atan_test_3
ck_assert_double_eq(atan(0.0000001), my_atan(0.0000001));

//! my_ceil tests

#test my_ceil_test_1
double i;
for (i = -M_PI/2; i <= M_PI/2; i+= 0.25) {
    ck_assert_double_eq(ceil(i), my_ceil(i));
}
#test my_ceil_test_2
ck_assert_double_eq(ceil(INFINITY), my_ceil(my_INFINITY));

#test my_ceil_test_3
ck_assert_double_eq(ceil(-INFINITY), my_ceil(-my_INFINITY));

#test my_ceil_test_4
ck_assert_double_nan(ceil(NAN));

#test my_ceil_test_5
ck_assert_double_nan(my_ceil(my_NAN));

#test my_ceil_test_6
ck_assert_double_eq(ceil(-7.0), my_ceil(-7.0));

#test my_ceil_test_7
ck_assert_double_eq(ceil(-98.1), my_ceil(-98.1));

#test my_ceil_test_8
ck_assert_double_eq(ceil(123.02), my_ceil(123.02));

#test my_ceil_test_9
ck_assert_double_eq(ceil(10009.00123), my_ceil(10009.00123));

#test my_ceil_test_10
ck_assert_double_eq(ceil(-10009.555), my_ceil(-10009.555));

#test my_ceil_test_11
ck_assert_double_eq(ceil(-0.10009), my_ceil(-0.10009));

//! my_cos tests

#test my_cos_test_1
ck_assert_double_eq(cos(0.2222), my_cos(0.2222));

#test my_cos_test_2
ck_assert_double_nan(my_cos(my_NAN));

#test my_cos_test_3
ck_assert_double_nan(my_cos(-my_INFINITY));

#test my_cos_test_4
ck_assert_double_nan(my_cos(my_INFINITY));

#test my_cos_test_5
ck_assert_double_eq(cos(3.3), my_cos(3.3));

//! my_exp tests

#test my_exp_test_1
ck_assert_double_eq_tol(my_exp(5), my_exp(5), 1e-6);

#test my_exp_test_2
ck_assert_double_eq_tol(my_exp(5.5), my_exp(5.5), 1e-6);

#test my_exp_test_3
ck_assert_double_eq_tol(my_exp(6.9), my_exp(6.9), 1e-6);

#test my_exp_test_4
ck_assert_double_nan(my_exp(NAN));

#test my_exp_test_7
ck_assert_double_eq(exp(0), my_exp(0));

#test my_exp_test_8
ck_assert_double_eq_tol(exp(1), my_exp(1), 1e-6);

//! my_fabs tests

#test my_fabs_test_1
ck_assert_double_eq(fabs(-INFINITY), my_fabs(-my_INFINITY));

#test my_fabs_test_2
ck_assert_double_nan(fabs(NAN));

#test my_fabs_test_3
ck_assert_double_nan(my_fabs(my_NAN));

#test my_fabs_test_4
ck_assert_double_eq(fabs(-7.0), my_fabs(-7.0));

#test my_fabs_test_5
ck_assert_double_eq(fabs(-98.1), my_fabs(-98.1));

#test my_fabs_test_6
ck_assert_double_eq(fabs(123.02), my_fabs(123.02));

#test my_fabs_test_7
ck_assert_double_eq(fabs(10009.0), my_fabs(10009.0));

#test my_fabs_test_8
ck_assert_double_eq(fabs(-10009.555), my_fabs(-10009.555));

#test my_fabs_test_9
ck_assert_double_eq(fabs(-0.10009), my_fabs(-0.10009));

#test my_fabs_test_10
ck_assert_double_eq(fabs(-1e23), my_fabs(-1e23));

#test my_exp_test_11
ck_assert_double_eq(fabs(INFINITY), my_fabs(my_INFINITY));

//! my_floor tests

#test my_floor_test_1
ck_assert_double_eq(floor(INFINITY), my_floor(my_INFINITY));

#test my_floor_test_2
ck_assert_double_eq(floor(-INFINITY), my_floor(-my_INFINITY));

#test my_floor_test_3
ck_assert_double_nan(floor(NAN));

#test my_floor_test_4
ck_assert_double_nan(my_floor(NAN));

#test my_floor_test_5
ck_assert_int_eq(floor(-7.0), my_floor(-7.0));

#test my_floor_test_6
ck_assert_double_eq(floor(-98.1), my_floor(-98.1));

#test my_floor_test_7
ck_assert_double_eq(floor(123.02), my_floor(123.02));

#test my_floor_test_8
ck_assert_double_eq(floor(10009.00123), my_floor(10009.00123));

#test my_floor_test_9
ck_assert_double_eq(floor(-10009.555), my_floor(-10009.555));

#test my_floor_test_10
ck_assert_double_eq(floor(-0.10009), my_floor(-0.10009));

#test my_floor_test_11
ck_assert_double_eq(floor(100091234.5), my_floor(100091234.5));

//! my_fmod tests

#test my_fmod_test_1
ck_assert_double_nan(fmod(1, 0));

#test my_fmod_test_2
ck_assert_double_nan(my_fmod(1, 0));

#test my_fmod_test_3
ck_assert_double_eq(fmod(0, -1), my_fmod(0, -1));

#test my_fmod_test_4
ck_assert_double_eq(fmod(0, 1), my_fmod(0, 1));

#test my_fmod_test_5
ck_assert_double_nan(fmod(INFINITY, -1));

#test my_fmod_test_6
ck_assert_double_nan(my_fmod(INFINITY, -1));

#test my_fmod_test_7
ck_assert_double_eq(fmod(-1, -INFINITY), my_fmod(-1, -my_INFINITY));

#test my_fmod_test_8
ck_assert_double_eq(fmod(0, INFINITY), my_fmod(0, my_INFINITY));

#test my_fmod_test_9
ck_assert_double_nan(my_fmod(0, my_NAN));

#test my_fmod_test_10
ck_assert_double_nan(fmod(0, NAN));

#test my_fmod_test_11
ck_assert_double_nan(my_fmod(my_NAN, my_NAN));

#test my_fmod_test_12
ck_assert_double_nan(fmod(NAN, NAN));

#test my_fmod_test_13
ck_assert_double_nan(my_fmod(my_NAN, my_INFINITY));

#test my_fmod_test_14
ck_assert_double_nan(my_fmod(my_INFINITY, my_NAN));

#test my_fmod_test_15
ck_assert_double_nan(my_fmod(my_NAN, -my_INFINITY));

#test my_fmod_test_16
ck_assert_double_nan(my_fmod(-my_INFINITY, my_NAN));

#test my_fmod_test_17
ck_assert_double_nan(fmod(NAN, INFINITY));

#test my_fmod_test_18
ck_assert_double_nan(fmod(INFINITY, NAN));

#test my_fmod_test_19
ck_assert_double_nan(fmod(NAN, -INFINITY));

#test my_fmod_test_20
ck_assert_double_nan(fmod(-INFINITY, NAN));

#test my_fmod_test_21
for (double a = -1500; a < 1500; a += 123) {
    for (double b = -12; b < 12; b += 1.25) {
    ck_assert_double_eq(fmod(a, b), my_fmod(a, b));
    ck_assert_double_eq(fmod(b, a), my_fmod(b, a));
    }
}

//! my_log tests

#test my_log_test_1
for (double k = 1; k < 100; k += 13.2) {
    double a = my_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test my_log_test_2
for (double k = 0.1; k < 4; k += 0.24) {
    double a = my_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test my_log_test_3
for (double k = 0.1; k < 10000; k += 123) {
    double a = my_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test my_log_test_4
for (double k = 0.000005; k < 1; k *= 5) {
    double a = my_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test my_log_test_5
ck_assert_double_nan(my_log(my_NAN));

#test my_log_test_6
ck_assert_double_eq(log(0), my_log(0));

#test my_log_test_7
ck_assert_double_nan(my_log(-3));

#test my_log_test_8
ck_assert_double_eq(log(INFINITY), my_log(my_INFINITY));

#test my_log_test_9
ck_assert_double_nan(my_log(-my_INFINITY));

#test my_log_test_10
ck_assert_double_eq(log(1), my_log(1));

#test my_log_test_11
ck_assert_double_eq_tol(log(2), my_log(2), 1e-6);

#test my_log_test_12
ck_assert_double_nan(my_log(-my_INFINITY));

//! my_pow tests

#test my_exp_test_5
ck_assert_double_eq(exp(INFINITY), my_exp(INFINITY));

#test my_pow_test_16
ck_assert_double_eq(pow(INFINITY, INFINITY), my_pow(my_INFINITY, my_INFINITY));

#test my_pow_test_26
ck_assert_double_eq(pow(2, INFINITY), my_pow(2, my_INFINITY));

#test my_sqrt_test_3
ck_assert_double_nan(sqrt(NAN));

#test my_sqrt_test_4
ck_assert_double_eq(my_sqrt(my_INFINITY), sqrt(INFINITY));

#test my_sqrt_test_5
ck_assert_double_nan(my_sqrt(-my_INFINITY));

#test my_sqrt_test_6
ck_assert_double_nan(sqrt(-INFINITY));

#test my_pow_test_3
ck_assert_double_eq(pow(1, 0), my_pow(1, 0));

#test my_pow_test_4
ck_assert_double_eq(pow(-1, 3), my_pow(-1, 3));

#test my_pow_test_5
ck_assert_double_eq(pow(-1, 4), my_pow(-1, 4));

#test my_pow_test_6
ck_assert_double_eq(pow(0, 0), my_pow(0, 0));

#test my_pow_test_7
ck_assert_double_eq(pow(0, -1), my_pow(0, -1));

#test my_pow_test_8
ck_assert_double_eq(pow(0, 1), my_pow(0, 1));

#test my_pow_test_9
ck_assert_double_eq(pow(INFINITY, 0), my_pow(my_INFINITY, 0));

#test my_pow_test_10
ck_assert_double_eq(pow(INFINITY, -1), my_pow(my_INFINITY, -1));

#test my_pow_test_13
ck_assert_double_nan(my_pow(0, my_NAN));

#test my_pow_test_15
ck_assert_double_nan(my_pow(my_NAN, my_NAN));

#test my_pow_test_22
ck_assert_double_nan(my_pow(my_NAN, my_INFINITY));

#test my_pow_test_23
ck_assert_double_nan(my_pow(my_INFINITY, my_NAN));

#test my_pow_test_24
ck_assert_double_nan(my_pow(my_NAN, -my_INFINITY));

#test my_pow_test_25
ck_assert_double_nan(my_pow(-my_INFINITY, my_NAN));

//! my_sin tests

#test my_sin_test_1
ck_assert_double_eq_tol(sin(0.123), my_sin(0.123), EPS);
        
#test my_sin_test_2
ck_assert_double_nan(my_sin(my_NAN));

#test my_sin_test_3
ck_assert_double_nan(my_sin(my_INFINITY));

#test my_sin_test_4
ck_assert_double_nan(my_sin(-my_INFINITY));

#test my_sin_test_5
ck_assert_double_eq_tol(sin(3.4), my_sin(3.4), EPS);


//! my_sqrt tests

#test my_sqrt_test_1
ck_assert_double_eq_tol(my_sqrt(233), sqrt(233), 1e-6);

#test my_sqrt_test_2
ck_assert_double_nan(my_sqrt(my_NAN));

#test my_sqrt_test_7
ck_assert_double_nan(my_sqrt(-5));

#test my_sqrt_test_9
ck_assert_double_eq_tol(my_sqrt(1000), sqrt(1000), 1e-7);

//! my_tan tests

#test my_tan_test_1
ck_assert_double_eq_tol(tan(0.123456), my_tan(0.123456), 1e-6);

#test my_tan_test_2
ck_assert_double_nan(my_tan(my_NAN));

#test my_tan_test_3
ck_assert_double_nan(my_tan(my_INFINITY));

#test my_tan_test_4
ck_assert_double_nan(my_tan(-my_INFINITY));
